
let s0  = (false, 1)

let joinl x (x0, x00) (x1, x10) =
  (x0 ? x0 : (x % 2) = 1 ? true : x1, x0 ? x00 : (x % 2) = 1 ? x : x10)

let joinr x5 (x6, x60) (x7, x70) =
  (x7 ? x7 : (x5 % 2) = 1 ? true : x6, x7 ? x70 : (x5 % 2) = 1 ? x5 : x60)

target⟨s0, joinl, joinr⟩(): int zipper -> (bool * int)  = 
{
  ‣ main  Top  ⟹  s0
  ‣ main  Zip(Left, a, child, z)  ⟹  joinl a (spec child) (main z)
  ‣ main  Zip(Right, a, child, z)  ⟹  joinr a (spec child) (main z)
  
  }
