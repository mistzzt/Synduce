
let s0  = (0, 0)

let joinl x11 (x12, x120) (x13, x130) =
  (x11 + (x12 + x13), max x120 (x11 + (x12 + x130)))

let joinr x17 (x18, x180) (x19, x190) =
  (x17 + (x18 + x19), max x190 (x17 + (x180 + x19)))

target⟨s0, joinl, joinr⟩(): int zipper -> (int * int)  = 
{
  ‣ main  Top  ⟹  s0
  ‣ main  Zip(Left, a, child, z)  ⟹  joinl a (spec child) (main z)
  ‣ main  Zip(Right, a, child, z)  ⟹  joinr a (spec child) (main z)
  
  }
