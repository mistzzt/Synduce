(set-logic DTNIA)
(synth-fun odot ((x67 Int) (x68 (Tuple Int Int)) (x69 (Tuple Int Int)))
 (Tuple Int Int) ((Tr (Tuple Int Int)) (Ix Int) (Ic Int))
 ((Tr (Tuple Int Int) ((mkTuple Ix Ix)))
  (Ix Int
   (Ic x67 ((_ tupSel 0) x68) ((_ tupSel 1) x68) ((_ tupSel 0) x69) ((_ tupSel 1) x69)
    (- Ix) (+ Ix Ix) (* Ic Ix) (div Ix Ic) (* Ix Ix) (div Ix Ix)))
  (Ic Int (0 1))))
(synth-fun f_0 ((x70 Int) (x71 Int)) (Tuple Int Int) ((Tr (Tuple Int Int)) (Ix Int) (Ic Int))
 ((Tr (Tuple Int Int) ((mkTuple Ix Ix)))
  (Ix Int (Ic x70 x71 (- Ix) (+ Ix Ix) (* Ic Ix) (div Ix Ic) (* Ix Ix) (div Ix Ix)))
  (Ic Int (0 1))))
(synth-fun s_0 ((x72 Int)) (Tuple Int Int) ((Tr (Tuple Int Int)) (Ix Int) (Ic Int))
 ((Tr (Tuple Int Int) ((mkTuple Ix Ix)))
  (Ix Int (Ic x72 (- Ix) (+ Ix Ix) (* Ic Ix) (div Ix Ic) (* Ix Ix) (div Ix Ix)))
  (Ic Int (0 1))))
(declare-var x Int)
(declare-var a Int)
(declare-var ex61 Int)
(declare-var i_ Int)
(declare-var i_65 Int)
(constraint (= (mkTuple 0 1) (s_0 x)))
(constraint (= (mkTuple i_ i_65) (odot x (s_0 x) (mkTuple i_ i_65))))
(constraint (= (mkTuple (+ i_ (* ex61 i_65)) (* x i_65)) (odot x (mkTuple ex61 x) (mkTuple i_ i_65))))
(constraint (= (mkTuple (+ 0 (* a 1)) (* x 1)) (f_0 x a)))
(check-synth)
